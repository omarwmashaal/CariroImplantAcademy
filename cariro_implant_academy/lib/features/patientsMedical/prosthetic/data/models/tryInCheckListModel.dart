import 'package:cariro_implant_academy/core/constants/enums/enums.dart';
import 'package:cariro_implant_academy/core/data/models/BasicNameIdObjectModel.dart';
import 'package:cariro_implant_academy/features/patientsMedical/prosthetic/domain/entities/tryInCheckListEntity.dart';

class TryInCheckListModel extends TryInCheckListEntity {
  TryInCheckListModel({
    super.satisfied,
    super.nonSatisfiedNewScan,
    super.nonSatisfiedDescription,
    super.seating,
    super.nonSeatingType,
    super.nonSeatingOtherNotes,
    super.mesialContacts,
    super.distalContacts,
    super.occlusion,
    super.buccalContour,
    super.passive,
    super.retention,
    super.occlusionNotes,
    super.occlusalPlanAndMidline,
    super.centricRelation,
    super.verticalDimension,
    super.lipSupport,
    super.sizeAndShapeOfTeeth,
    super.canting,
    super.frontalSmilingAndLateralPhotos,
    super.evaluation,
    super.explainWhy,
    super.id,
    super.patient,
    super.patientId,
    super.step,
    super.stepId,
    super.teeth,
  });

  factory TryInCheckListModel.fromJson(Map<String, dynamic> map) {
    return TryInCheckListModel(
      satisfied: map['satisfied'],
      nonSatisfiedNewScan: map['nonSatisfiedNewScan'],
      nonSatisfiedDescription: map['nonSatisfiedDescription'],
      seating: map['seating'],
      nonSeatingType: map['nonSeatingType'] != null ? EnumTryInSeating.values[map['nonSeatingType']] : null,
      nonSeatingOtherNotes: map['nonSeatingOtherNotes'],
      mesialContacts: map['mesialContacts'] != null ? EnumTryInContacts.values[map['mesialContacts']] : null,
      distalContacts: map['distalContacts'] != null ? EnumTryInContacts.values[map['distalContacts']] : null,
      occlusion: map['occlusion'] != null ? EnumOcclusion.values[map['occlusion']] : null,
      buccalContour: map['buccalContour'] != null ? EnumBuccalContour.values[map['buccalContour']] : null,
      passive: map['passive'],
      retention: map['retention'],
      occlusionNotes: map['occlusionNotes'],
      occlusalPlanAndMidline: map['occlusalPlanAndMidline'],
      centricRelation: map['centricRelation'],
      verticalDimension: map['verticalDimension'],
      lipSupport: map['lipSupport'],
      sizeAndShapeOfTeeth: map['sizeAndShapeOfTeeth'],
      canting: map['canting'],
      frontalSmilingAndLateralPhotos: map['frontalSmilingAndLateralPhotos'],
      evaluation: map['evaluation'],
      explainWhy: map['explainWhy'],
      id: map['id'],
      patient: map['patient']==null?null:BasicNameIdObjectModel.fromJson(map['patient']),
      patientId: map['patientId'],
      step: map['step']==null?null:BasicNameIdObjectModel.fromJson(map['step']),
      stepId: map['stepId'],
      teeth: ((map['teeth']??[]) as List<dynamic>).map((e) => e as int).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'satisfied': satisfied,
      'nonSatisfiedNewScan': nonSatisfiedNewScan,
      'nonSatisfiedDescription': nonSatisfiedDescription,
      'seating': seating,
      'nonSeatingType': nonSeatingType?.index,
      'nonSeatingOtherNotes': nonSeatingOtherNotes,
      'mesialContacts': mesialContacts?.index,
      'distalContacts': distalContacts?.index,
      'occlusion': occlusion?.index,
      'buccalContour': buccalContour?.index,
      'passive': passive,
      'retention': retention,
      'occlusionNotes': occlusionNotes,
      'occlusalPlanAndMidline': occlusalPlanAndMidline,
      'centricRelation': centricRelation,
      'verticalDimension': verticalDimension,
      'lipSupport': lipSupport,
      'sizeAndShapeOfTeeth': sizeAndShapeOfTeeth,
      'canting': canting,
      'frontalSmilingAndLateralPhotos': frontalSmilingAndLateralPhotos,
      'evaluation': evaluation,
      'explainWhy': explainWhy,
      'id': id,
      'patientId': patientId,
      'stepId': stepId,
      'teeth': teeth,
    };
  }

  static TryInCheckListModel fromEntity(TryInCheckListEntity entity) {
    return TryInCheckListModel(
      satisfied: entity.satisfied,
      nonSatisfiedNewScan: entity.nonSatisfiedNewScan,
      nonSatisfiedDescription: entity.nonSatisfiedDescription,
      seating: entity.seating,
      nonSeatingType: entity.nonSeatingType,
      nonSeatingOtherNotes: entity.nonSeatingOtherNotes,
      mesialContacts: entity.mesialContacts,
      distalContacts: entity.distalContacts,
      occlusion: entity.occlusion,
      buccalContour: entity.buccalContour,
      passive: entity.passive,
      retention: entity.retention,
      occlusionNotes: entity.occlusionNotes,
      occlusalPlanAndMidline: entity.occlusalPlanAndMidline,
      centricRelation: entity.centricRelation,
      verticalDimension: entity.verticalDimension,
      lipSupport: entity.lipSupport,
      sizeAndShapeOfTeeth: entity.sizeAndShapeOfTeeth,
      canting: entity.canting,
      frontalSmilingAndLateralPhotos: entity.frontalSmilingAndLateralPhotos,
      evaluation: entity.evaluation,
      explainWhy: entity.explainWhy,
      id: entity.id,
      patient: entity.patient,
      patientId: entity.patientId,
      step: entity.step,
      stepId: entity.stepId,
      teeth: entity.teeth,
    );
  }
}
