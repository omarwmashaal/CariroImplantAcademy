import 'package:cariro_implant_academy/core/constants/enums/enums.dart';
import 'package:cariro_implant_academy/core/domain/entities/BasicNameIdObjectEntity.dart';
import 'package:cariro_implant_academy/core/features/settings/domain/entities/clinicPriceEntity.dart';
import 'package:cariro_implant_academy/core/features/settings/domain/entities/implantEntity.dart';
import 'package:cariro_implant_academy/core/features/settings/domain/entities/tacEntity.dart';
import 'package:cariro_implant_academy/features/labRequest/domain/entities/labItemCompanyEntity.dart';
import 'package:cariro_implant_academy/features/labRequest/domain/entities/labItemEntity.dart';
import 'package:cariro_implant_academy/features/labRequest/domain/entities/labItemShadeEntity.dart';
import 'package:cariro_implant_academy/features/labRequest/domain/entities/labOptionEntity.dart';
import 'package:cariro_implant_academy/features/patientsMedical/prosthetic/domain/enums/enum.dart';
import 'package:cariro_implant_academy/features/patientsMedical/treatmentFeature/domain/entities/treatmentItemEntity.dart';
import 'package:dartz/dartz.dart';

import '../../../../../features/labRequest/domain/entities/labItemParentEntity.dart';
import '../../../../../features/patient/domain/entities/roomEntity.dart';
import '../../../../error/failure.dart';
import '../../../../useCases/useCases.dart';
import '../entities/membraneCompanyEnity.dart';
import '../entities/membraneEnity.dart';
import '../useCases/addImplantsUseCase.dart';
import '../useCases/addMembranesUseCase.dart';

abstract class SettingsRepository {
  //Get Methods
  Future<Either<Failure, List<TacCompanyEntity>>> getTacs();
  Future<Either<Failure, List<MembraneCompanyEntity>>> getMembraneCompanies();
  Future<Either<Failure, List<MembraneEntity>>> getMembranes(int id);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getImplantCompanies();
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getImplantLines(int id);
  Future<Either<Failure, List<ImplantEntity>>> getImplants(int id);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getDefaultSurgicalComplications();
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getIncomeCategories();
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getExpensesCategories(Website website);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getPaymentMethods();
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getNonMedicalNonStockExpensesCategories(Website website);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getNonMedicalStockCategories(Website website);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getStockCategories(Website website);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getMedicalExpensesCategories(Website website);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getSuppliers(Website website, bool medical);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getProsthticItems(EnumProstheticType type);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getProsthticNextVisit(EnumProstheticType type, int itemId);
  Future<Either<Failure, List<BasicNameIdObjectEntity>>> getProsthticStatus(EnumProstheticType type, int itemId);
  //Update Methods
  Future<Either<Failure, NoParams>> updateDefaultSurgicalComplications(List<BasicNameIdObjectEntity> value);
  Future<Either<Failure, NoParams>> changeImplantCompanyName(BasicNameIdObjectEntity value);
  Future<Either<Failure, NoParams>> changeImplantLineName(BasicNameIdObjectEntity value);
  Future<Either<Failure, NoParams>> addImplants(UpdateImplantsParams value);
  Future<Either<Failure, NoParams>> addImplantLines(BasicNameIdObjectEntity value);
  Future<Either<Failure, NoParams>> addImplantCompanies(String name);
  Future<Either<Failure, NoParams>> addMembranes(AddMembraneParams value);
  Future<Either<Failure, NoParams>> addTacsCompanies(List<TacCompanyEntity> model);
  Future<Either<Failure, NoParams>> addMembraneCompanies(List<BasicNameIdObjectEntity> model);
  Future<Either<Failure, NoParams>> addExpensesCategories(List<BasicNameIdObjectEntity> model);
  Future<Either<Failure, NoParams>> addIncomeCategories(List<BasicNameIdObjectEntity> model);
  Future<Either<Failure, NoParams>> addSuppliers(List<BasicNameIdObjectEntity> model, bool medical);
  Future<Either<Failure, NoParams>> addStockCategories(List<BasicNameIdObjectEntity> model);
  Future<Either<Failure, NoParams>> addPaymentMethods(List<BasicNameIdObjectEntity> model);
  Future<Either<Failure, NoParams>> editRooms(List<RoomEntity> model);
  Future<Either<Failure, NoParams>> editTreatmentPrices(List<TreatmentItemEntity> prices);
  Future<Either<Failure, List<ClinicPriceEntity>>> getTeethTreatmentPrices(List<int>? teeth, List<EnumClinicPrices>? category);
  Future<Either<Failure, NoParams>> updateTeethTreatmentPrices(List<ClinicPriceEntity> params);
  Future<Either<Failure, List<LabItemParentEntity>>> getLabItemParents();
  Future<Either<Failure, List<LabItemCompanyEntity>>> getLabItemCompanies(int id);
  Future<Either<Failure, List<LabItemShadeEntity>>> getLabItemLines(int? parentId, int? companyId);
  Future<Either<Failure, List<LabItemEntity>>> getLabItems(int? parentId, int? companyId, int? shadeId);
  Future<Either<Failure, List<LabOptionEntity>>> getLabOptions(int? parentId);
  Future<Either<Failure, NoParams>> updateLabItems(List<LabItemEntity> data);
  Future<Either<Failure, NoParams>> updateLabItemsShades(List<LabItemShadeEntity> data);
  Future<Either<Failure, NoParams>> updateLabItemsCompanies(List<LabItemCompanyEntity> data);
  Future<Either<Failure, NoParams>> updateLabItemsParents(List<LabItemParentEntity> data);
  Future<Either<Failure, NoParams>> updateLabOptions(List<LabOptionEntity> data);
  Future<Either<Failure, NoParams>> updateProstheticItems(EnumProstheticType type, List<BasicNameIdObjectEntity> data);
  Future<Either<Failure, NoParams>> updateProstheticNextVisit(EnumProstheticType type, int itemId, List<BasicNameIdObjectEntity> data);
  Future<Either<Failure, NoParams>> updateProstheticStatus(EnumProstheticType type, int itemId, List<BasicNameIdObjectEntity> data);
}
