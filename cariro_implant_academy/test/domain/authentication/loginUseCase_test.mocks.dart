// Mocks generated by Mockito 5.4.2 from annotations
// in cariro_implant_academy/test/domain/authentication/loginUseCase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cariro_implant_academy/core/error/failure.dart' as _i5;
import 'package:cariro_implant_academy/core/features/authentication/domain/entities/authenticationUserEntity.dart'
    as _i6;
import 'package:cariro_implant_academy/core/features/authentication/domain/repositories/authenticationRepo.dart'
    as _i3;
import 'package:cariro_implant_academy/core/features/authentication/domain/usecases/loginUseCase.dart'
    as _i7;
import 'package:cariro_implant_academy/core/useCases/useCases.dart' as _i8;
import 'package:cariro_implant_academy/features/user/domain/entities/userEntity.dart'
    as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepo extends _i1.Mock
    implements _i3.AuthenticationRepo {
  MockAuthenticationRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthenticationUserEntity>> login(
          _i7.LoginParams? loginParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginParams],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i6.AuthenticationUserEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthenticationUserEntity>(
          this,
          Invocation.method(
            #login,
            [loginParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthenticationUserEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.NoParams>> registerUser(
          _i9.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [user],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.NoParams>>.value(
            _FakeEither_0<_i5.Failure, _i8.NoParams>(
          this,
          Invocation.method(
            #registerUser,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.NoParams>>);
  @override
  _i4.Future<bool> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.NoParams>> resetPasswordForUser(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPasswordForUser,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.NoParams>>.value(
            _FakeEither_0<_i5.Failure, _i8.NoParams>(
          this,
          Invocation.method(
            #resetPasswordForUser,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.NoParams>>);
}
