// Mocks generated by Mockito 5.4.2 from annotations
// in cariro_implant_academy/test/presentation/authentication/authenticationBloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cariro_implant_academy/core/domain/repositories/loginStatusRepo.dart'
    as _i4;
import 'package:cariro_implant_academy/core/domain/useCases/checkLogInStatus.dart'
    as _i9;
import 'package:cariro_implant_academy/core/error/failure.dart' as _i7;
import 'package:cariro_implant_academy/core/features/authentication/domain/entities/authenticationUserEntity.dart'
    as _i8;
import 'package:cariro_implant_academy/core/features/authentication/domain/repositories/authenticationRepo.dart'
    as _i2;
import 'package:cariro_implant_academy/core/features/authentication/domain/usecases/loginUseCase.dart'
    as _i5;
import 'package:cariro_implant_academy/core/useCases/useCases.dart' as _i10;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepo_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepo {
  _FakeAuthenticationRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckLoginStatusRepo_2 extends _i1.SmartFake
    implements _i4.CheckLoginStatusRepo {
  _FakeCheckLoginStatusRepo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i5.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepo get authenticationRepo => (super.noSuchMethod(
        Invocation.getter(#authenticationRepo),
        returnValue: _FakeAuthenticationRepo_0(
          this,
          Invocation.getter(#authenticationRepo),
        ),
      ) as _i2.AuthenticationRepo);
  @override
  set authenticationRepo(_i2.AuthenticationRepo? _authenticationRepo) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticationRepo,
          _authenticationRepo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.AuthenticationUserEntity>> call(
          _i5.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<
                _i3.Either<_i7.Failure, _i8.AuthenticationUserEntity>>.value(
            _FakeEither_1<_i7.Failure, _i8.AuthenticationUserEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.AuthenticationUserEntity>>);
}

/// A class which mocks [CheckLoginStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckLoginStatusUseCase extends _i1.Mock
    implements _i9.CheckLoginStatusUseCase {
  MockCheckLoginStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CheckLoginStatusRepo get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeCheckLoginStatusRepo_2(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i4.CheckLoginStatusRepo);
  @override
  set repo(_i4.CheckLoginStatusRepo? _repo) => super.noSuchMethod(
        Invocation.setter(
          #repo,
          _repo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.AuthenticationUserEntity>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<
                _i3.Either<_i7.Failure, _i8.AuthenticationUserEntity>>.value(
            _FakeEither_1<_i7.Failure, _i8.AuthenticationUserEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.AuthenticationUserEntity>>);
}
