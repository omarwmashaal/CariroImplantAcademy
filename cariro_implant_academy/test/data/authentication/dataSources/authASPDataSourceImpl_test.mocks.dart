// Mocks generated by Mockito 5.4.2 from annotations
// in cariro_implant_academy/test/data/authentication/dataSources/authASPDataSourceImpl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:cariro_implant_academy/core/Http/httpRepo.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStandardHttpResponse_0 extends _i1.SmartFake
    implements _i2.StandardHttpResponse {
  _FakeStandardHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpRepo extends _i1.Mock implements _i2.HttpRepo {
  MockHttpRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.StandardHttpResponse> get({required String? host}) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {#host: host},
        ),
        returnValue: _i3.Future<_i2.StandardHttpResponse>.value(
            _FakeStandardHttpResponse_0(
          this,
          Invocation.method(
            #get,
            [],
            {#host: host},
          ),
        )),
      ) as _i3.Future<_i2.StandardHttpResponse>);
  @override
  _i3.Future<_i2.StandardHttpResponse> post({
    required String? host,
    dynamic body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #host: host,
            #body: body,
          },
        ),
        returnValue: _i3.Future<_i2.StandardHttpResponse>.value(
            _FakeStandardHttpResponse_0(
          this,
          Invocation.method(
            #post,
            [],
            {
              #host: host,
              #body: body,
            },
          ),
        )),
      ) as _i3.Future<_i2.StandardHttpResponse>);
  @override
  _i3.Future<_i2.StandardHttpResponse> put({
    required String? host,
    dynamic body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #host: host,
            #body: body,
          },
        ),
        returnValue: _i3.Future<_i2.StandardHttpResponse>.value(
            _FakeStandardHttpResponse_0(
          this,
          Invocation.method(
            #put,
            [],
            {
              #host: host,
              #body: body,
            },
          ),
        )),
      ) as _i3.Future<_i2.StandardHttpResponse>);
  @override
  _i3.Future<_i2.StandardHttpResponse> delete({
    required String? host,
    dynamic body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #host: host,
            #body: body,
          },
        ),
        returnValue: _i3.Future<_i2.StandardHttpResponse>.value(
            _FakeStandardHttpResponse_0(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #host: host,
              #body: body,
            },
          ),
        )),
      ) as _i3.Future<_i2.StandardHttpResponse>);
  @override
  _i3.Future<_i2.StandardHttpResponse> uploadImage({
    required String? url,
    required _i4.Uint8List? imageBytes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [],
          {
            #url: url,
            #imageBytes: imageBytes,
          },
        ),
        returnValue: _i3.Future<_i2.StandardHttpResponse>.value(
            _FakeStandardHttpResponse_0(
          this,
          Invocation.method(
            #uploadImage,
            [],
            {
              #url: url,
              #imageBytes: imageBytes,
            },
          ),
        )),
      ) as _i3.Future<_i2.StandardHttpResponse>);
}
